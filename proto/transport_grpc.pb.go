// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: transport.proto

package myapp

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransportAnalytics_HealthCheck_FullMethodName          = "/com.bluesg.transport.TransportAnalytics/HealthCheck"
	TransportAnalytics_ReadyCheck_FullMethodName           = "/com.bluesg.transport.TransportAnalytics/ReadyCheck"
	TransportAnalytics_CreateIncident_FullMethodName       = "/com.bluesg.transport.TransportAnalytics/CreateIncident"
	TransportAnalytics_GetTopBreakdowns_FullMethodName     = "/com.bluesg.transport.TransportAnalytics/GetTopBreakdowns"
	TransportAnalytics_GetMTBF_FullMethodName              = "/com.bluesg.transport.TransportAnalytics/GetMTBF"
	TransportAnalytics_GetRecentDisruptions_FullMethodName = "/com.bluesg.transport.TransportAnalytics/GetRecentDisruptions"
	TransportAnalytics_CreateLine_FullMethodName           = "/com.bluesg.transport.TransportAnalytics/CreateLine"
	TransportAnalytics_ListLines_FullMethodName            = "/com.bluesg.transport.TransportAnalytics/ListLines"
	TransportAnalytics_GetLine_FullMethodName              = "/com.bluesg.transport.TransportAnalytics/GetLine"
	TransportAnalytics_UpdateLine_FullMethodName           = "/com.bluesg.transport.TransportAnalytics/UpdateLine"
	TransportAnalytics_DeleteLine_FullMethodName           = "/com.bluesg.transport.TransportAnalytics/DeleteLine"
	TransportAnalytics_CreateStation_FullMethodName        = "/com.bluesg.transport.TransportAnalytics/CreateStation"
	TransportAnalytics_ListStations_FullMethodName         = "/com.bluesg.transport.TransportAnalytics/ListStations"
	TransportAnalytics_GetStation_FullMethodName           = "/com.bluesg.transport.TransportAnalytics/GetStation"
	TransportAnalytics_UpdateStation_FullMethodName        = "/com.bluesg.transport.TransportAnalytics/UpdateStation"
	TransportAnalytics_DeleteStation_FullMethodName        = "/com.bluesg.transport.TransportAnalytics/DeleteStation"
)

// TransportAnalyticsClient is the client API for TransportAnalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportAnalyticsClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	ReadyCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	CreateIncident(ctx context.Context, in *CreateIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error)
	GetTopBreakdowns(ctx context.Context, in *TopBreakdownsRequest, opts ...grpc.CallOption) (*TopBreakdownsResponse, error)
	GetMTBF(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MTBFResponse, error)
	GetRecentDisruptions(ctx context.Context, in *RecentDisruptionsRequest, opts ...grpc.CallOption) (*RecentDisruptionsResponse, error)
	CreateLine(ctx context.Context, in *CreateLineRequest, opts ...grpc.CallOption) (*LineResponse, error)
	ListLines(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLinesResponse, error)
	GetLine(ctx context.Context, in *GetLineRequest, opts ...grpc.CallOption) (*LineResponse, error)
	UpdateLine(ctx context.Context, in *UpdateLineRequest, opts ...grpc.CallOption) (*LineResponse, error)
	DeleteLine(ctx context.Context, in *DeleteLineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateStation(ctx context.Context, in *CreateStationRequest, opts ...grpc.CallOption) (*StationResponse, error)
	ListStations(ctx context.Context, in *ListStationsRequest, opts ...grpc.CallOption) (*ListStationsResponse, error)
	GetStation(ctx context.Context, in *GetStationRequest, opts ...grpc.CallOption) (*StationResponse, error)
	UpdateStation(ctx context.Context, in *UpdateStationRequest, opts ...grpc.CallOption) (*StationResponse, error)
	DeleteStation(ctx context.Context, in *DeleteStationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type transportAnalyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportAnalyticsClient(cc grpc.ClientConnInterface) TransportAnalyticsClient {
	return &transportAnalyticsClient{cc}
}

func (c *transportAnalyticsClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, TransportAnalytics_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) ReadyCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, TransportAnalytics_ReadyCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) CreateIncident(ctx context.Context, in *CreateIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncidentResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_CreateIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) GetTopBreakdowns(ctx context.Context, in *TopBreakdownsRequest, opts ...grpc.CallOption) (*TopBreakdownsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopBreakdownsResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_GetTopBreakdowns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) GetMTBF(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MTBFResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MTBFResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_GetMTBF_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) GetRecentDisruptions(ctx context.Context, in *RecentDisruptionsRequest, opts ...grpc.CallOption) (*RecentDisruptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecentDisruptionsResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_GetRecentDisruptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) CreateLine(ctx context.Context, in *CreateLineRequest, opts ...grpc.CallOption) (*LineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LineResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_CreateLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) ListLines(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinesResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_ListLines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) GetLine(ctx context.Context, in *GetLineRequest, opts ...grpc.CallOption) (*LineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LineResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_GetLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) UpdateLine(ctx context.Context, in *UpdateLineRequest, opts ...grpc.CallOption) (*LineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LineResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_UpdateLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) DeleteLine(ctx context.Context, in *DeleteLineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransportAnalytics_DeleteLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) CreateStation(ctx context.Context, in *CreateStationRequest, opts ...grpc.CallOption) (*StationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StationResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_CreateStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) ListStations(ctx context.Context, in *ListStationsRequest, opts ...grpc.CallOption) (*ListStationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStationsResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_ListStations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) GetStation(ctx context.Context, in *GetStationRequest, opts ...grpc.CallOption) (*StationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StationResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_GetStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) UpdateStation(ctx context.Context, in *UpdateStationRequest, opts ...grpc.CallOption) (*StationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StationResponse)
	err := c.cc.Invoke(ctx, TransportAnalytics_UpdateStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportAnalyticsClient) DeleteStation(ctx context.Context, in *DeleteStationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransportAnalytics_DeleteStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportAnalyticsServer is the server API for TransportAnalytics service.
// All implementations should embed UnimplementedTransportAnalyticsServer
// for forward compatibility.
type TransportAnalyticsServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	ReadyCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	CreateIncident(context.Context, *CreateIncidentRequest) (*IncidentResponse, error)
	GetTopBreakdowns(context.Context, *TopBreakdownsRequest) (*TopBreakdownsResponse, error)
	GetMTBF(context.Context, *emptypb.Empty) (*MTBFResponse, error)
	GetRecentDisruptions(context.Context, *RecentDisruptionsRequest) (*RecentDisruptionsResponse, error)
	CreateLine(context.Context, *CreateLineRequest) (*LineResponse, error)
	ListLines(context.Context, *emptypb.Empty) (*ListLinesResponse, error)
	GetLine(context.Context, *GetLineRequest) (*LineResponse, error)
	UpdateLine(context.Context, *UpdateLineRequest) (*LineResponse, error)
	DeleteLine(context.Context, *DeleteLineRequest) (*emptypb.Empty, error)
	CreateStation(context.Context, *CreateStationRequest) (*StationResponse, error)
	ListStations(context.Context, *ListStationsRequest) (*ListStationsResponse, error)
	GetStation(context.Context, *GetStationRequest) (*StationResponse, error)
	UpdateStation(context.Context, *UpdateStationRequest) (*StationResponse, error)
	DeleteStation(context.Context, *DeleteStationRequest) (*emptypb.Empty, error)
}

// UnimplementedTransportAnalyticsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransportAnalyticsServer struct{}

func (UnimplementedTransportAnalyticsServer) HealthCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTransportAnalyticsServer) ReadyCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyCheck not implemented")
}
func (UnimplementedTransportAnalyticsServer) CreateIncident(context.Context, *CreateIncidentRequest) (*IncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncident not implemented")
}
func (UnimplementedTransportAnalyticsServer) GetTopBreakdowns(context.Context, *TopBreakdownsRequest) (*TopBreakdownsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopBreakdowns not implemented")
}
func (UnimplementedTransportAnalyticsServer) GetMTBF(context.Context, *emptypb.Empty) (*MTBFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMTBF not implemented")
}
func (UnimplementedTransportAnalyticsServer) GetRecentDisruptions(context.Context, *RecentDisruptionsRequest) (*RecentDisruptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentDisruptions not implemented")
}
func (UnimplementedTransportAnalyticsServer) CreateLine(context.Context, *CreateLineRequest) (*LineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLine not implemented")
}
func (UnimplementedTransportAnalyticsServer) ListLines(context.Context, *emptypb.Empty) (*ListLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLines not implemented")
}
func (UnimplementedTransportAnalyticsServer) GetLine(context.Context, *GetLineRequest) (*LineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLine not implemented")
}
func (UnimplementedTransportAnalyticsServer) UpdateLine(context.Context, *UpdateLineRequest) (*LineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLine not implemented")
}
func (UnimplementedTransportAnalyticsServer) DeleteLine(context.Context, *DeleteLineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLine not implemented")
}
func (UnimplementedTransportAnalyticsServer) CreateStation(context.Context, *CreateStationRequest) (*StationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStation not implemented")
}
func (UnimplementedTransportAnalyticsServer) ListStations(context.Context, *ListStationsRequest) (*ListStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStations not implemented")
}
func (UnimplementedTransportAnalyticsServer) GetStation(context.Context, *GetStationRequest) (*StationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (UnimplementedTransportAnalyticsServer) UpdateStation(context.Context, *UpdateStationRequest) (*StationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStation not implemented")
}
func (UnimplementedTransportAnalyticsServer) DeleteStation(context.Context, *DeleteStationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStation not implemented")
}
func (UnimplementedTransportAnalyticsServer) testEmbeddedByValue() {}

// UnsafeTransportAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportAnalyticsServer will
// result in compilation errors.
type UnsafeTransportAnalyticsServer interface {
	mustEmbedUnimplementedTransportAnalyticsServer()
}

func RegisterTransportAnalyticsServer(s grpc.ServiceRegistrar, srv TransportAnalyticsServer) {
	// If the following call pancis, it indicates UnimplementedTransportAnalyticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransportAnalytics_ServiceDesc, srv)
}

func _TransportAnalytics_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_ReadyCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).ReadyCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_ReadyCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).ReadyCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_CreateIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).CreateIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_CreateIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).CreateIncident(ctx, req.(*CreateIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_GetTopBreakdowns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopBreakdownsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).GetTopBreakdowns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_GetTopBreakdowns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).GetTopBreakdowns(ctx, req.(*TopBreakdownsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_GetMTBF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).GetMTBF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_GetMTBF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).GetMTBF(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_GetRecentDisruptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentDisruptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).GetRecentDisruptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_GetRecentDisruptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).GetRecentDisruptions(ctx, req.(*RecentDisruptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_CreateLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).CreateLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_CreateLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).CreateLine(ctx, req.(*CreateLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_ListLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).ListLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_ListLines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).ListLines(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_GetLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).GetLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_GetLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).GetLine(ctx, req.(*GetLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_UpdateLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).UpdateLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_UpdateLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).UpdateLine(ctx, req.(*UpdateLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_DeleteLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).DeleteLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_DeleteLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).DeleteLine(ctx, req.(*DeleteLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_CreateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).CreateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_CreateStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).CreateStation(ctx, req.(*CreateStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_ListStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).ListStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_ListStations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).ListStations(ctx, req.(*ListStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_GetStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).GetStation(ctx, req.(*GetStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_UpdateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).UpdateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_UpdateStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).UpdateStation(ctx, req.(*UpdateStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportAnalytics_DeleteStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportAnalyticsServer).DeleteStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportAnalytics_DeleteStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportAnalyticsServer).DeleteStation(ctx, req.(*DeleteStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportAnalytics_ServiceDesc is the grpc.ServiceDesc for TransportAnalytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportAnalytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.bluesg.transport.TransportAnalytics",
	HandlerType: (*TransportAnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TransportAnalytics_HealthCheck_Handler,
		},
		{
			MethodName: "ReadyCheck",
			Handler:    _TransportAnalytics_ReadyCheck_Handler,
		},
		{
			MethodName: "CreateIncident",
			Handler:    _TransportAnalytics_CreateIncident_Handler,
		},
		{
			MethodName: "GetTopBreakdowns",
			Handler:    _TransportAnalytics_GetTopBreakdowns_Handler,
		},
		{
			MethodName: "GetMTBF",
			Handler:    _TransportAnalytics_GetMTBF_Handler,
		},
		{
			MethodName: "GetRecentDisruptions",
			Handler:    _TransportAnalytics_GetRecentDisruptions_Handler,
		},
		{
			MethodName: "CreateLine",
			Handler:    _TransportAnalytics_CreateLine_Handler,
		},
		{
			MethodName: "ListLines",
			Handler:    _TransportAnalytics_ListLines_Handler,
		},
		{
			MethodName: "GetLine",
			Handler:    _TransportAnalytics_GetLine_Handler,
		},
		{
			MethodName: "UpdateLine",
			Handler:    _TransportAnalytics_UpdateLine_Handler,
		},
		{
			MethodName: "DeleteLine",
			Handler:    _TransportAnalytics_DeleteLine_Handler,
		},
		{
			MethodName: "CreateStation",
			Handler:    _TransportAnalytics_CreateStation_Handler,
		},
		{
			MethodName: "ListStations",
			Handler:    _TransportAnalytics_ListStations_Handler,
		},
		{
			MethodName: "GetStation",
			Handler:    _TransportAnalytics_GetStation_Handler,
		},
		{
			MethodName: "UpdateStation",
			Handler:    _TransportAnalytics_UpdateStation_Handler,
		},
		{
			MethodName: "DeleteStation",
			Handler:    _TransportAnalytics_DeleteStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport.proto",
}
