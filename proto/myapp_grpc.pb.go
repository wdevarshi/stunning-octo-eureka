// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: myapp.proto

package myapp

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MySvc_HealthCheck_FullMethodName = "/com.github.ankurs.MySvc/HealthCheck"
	MySvc_ReadyCheck_FullMethodName  = "/com.github.ankurs.MySvc/ReadyCheck"
	MySvc_Echo_FullMethodName        = "/com.github.ankurs.MySvc/Echo"
	MySvc_Error_FullMethodName       = "/com.github.ankurs.MySvc/Error"
)

// MySvcClient is the client API for MySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySvcClient interface {
	// LivenessProbe for the service
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// ReadinessProbe for the service
	ReadyCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Error(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type mySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMySvcClient(cc grpc.ClientConnInterface) MySvcClient {
	return &mySvcClient{cc}
}

func (c *mySvcClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, MySvc_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySvcClient) ReadyCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, MySvc_ReadyCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySvcClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, MySvc_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySvcClient) Error(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, MySvc_Error_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySvcServer is the server API for MySvc service.
// All implementations should embed UnimplementedMySvcServer
// for forward compatibility.
type MySvcServer interface {
	// LivenessProbe for the service
	HealthCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	// ReadinessProbe for the service
	ReadyCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	Error(context.Context, *EchoRequest) (*EchoResponse, error)
}

// UnimplementedMySvcServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMySvcServer struct{}

func (UnimplementedMySvcServer) HealthCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMySvcServer) ReadyCheck(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyCheck not implemented")
}
func (UnimplementedMySvcServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedMySvcServer) Error(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedMySvcServer) testEmbeddedByValue() {}

// UnsafeMySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySvcServer will
// result in compilation errors.
type UnsafeMySvcServer interface {
	mustEmbedUnimplementedMySvcServer()
}

func RegisterMySvcServer(s grpc.ServiceRegistrar, srv MySvcServer) {
	// If the following call pancis, it indicates UnimplementedMySvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MySvc_ServiceDesc, srv)
}

func _MySvc_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySvcServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySvc_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySvcServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySvc_ReadyCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySvcServer).ReadyCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySvc_ReadyCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySvcServer).ReadyCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySvc_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySvcServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySvc_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySvcServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySvc_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySvcServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySvc_Error_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySvcServer).Error(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MySvc_ServiceDesc is the grpc.ServiceDesc for MySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.ankurs.MySvc",
	HandlerType: (*MySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _MySvc_HealthCheck_Handler,
		},
		{
			MethodName: "ReadyCheck",
			Handler:    _MySvc_ReadyCheck_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _MySvc_Echo_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _MySvc_Error_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myapp.proto",
}
